name: Continuous Integration

on:
  push:
    branches: [ main, develop, feat/*, fix/* ]
  pull_request:
    branches: [ main, develop ]

permissions:
  contents: read
  security-events: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, performance]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      if: matrix.test-type == 'unit'
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        cache: 'pip'
        cache-dependency-path: 'backend/requirements.txt'
        
    - name: Install Python dependencies
      run: |
        pip install -r backend/requirements.txt
        
    - name: Set up test environment
      run: |
        # Create test database directory
        mkdir -p backend/instance
        # Set environment variables for testing
        echo "DATABASE_URL=sqlite:///backend/instance/test_pokehub.db" >> $GITHUB_ENV
        echo "FLASK_ENV=testing" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key" >> $GITHUB_ENV
        echo "JWT_SECRET_KEY=test-jwt-secret" >> $GITHUB_ENV
        
    - name: Initialize test database
      run: |
        # Initialize database tables for testing
        python -c "
        import os
        os.environ['DATABASE_URL'] = 'sqlite:///backend/instance/test_pokehub.db'
        os.environ['FLASK_ENV'] = 'testing'
        from backend.app import app
        from backend.database import db
        with app.app_context():
            db.create_all()
            print('âœ… Test database initialized')
        "
        
    - name: Install Node.js dependencies
      if: matrix.test-type == 'unit'
      run: |
        cd frontend && npm ci
        
    - name: Run tests
      run: |
        case ${{ matrix.test-type }} in
          unit)
            echo "Running unit tests..."
            cd frontend && npm run test:run
            cd .. && python -m pytest tests/unit/backend/ -v --rootdir=.
            ;;
          integration)
            echo "Running integration tests..."
            # Start backend for integration tests
            python -m backend.app &
            BACKEND_PID=$!
            sleep 10
            # Run integration tests
            python -m pytest tests/integration/legacy/ -v --rootdir=. || TEST_RESULT=$?
            # Stop backend
            kill $BACKEND_PID || true
            exit ${TEST_RESULT:-0}
            ;;
          performance)
            echo "Running performance tests..."
            # Start backend for performance tests
            python -m backend.app &
            BACKEND_PID=$!
            sleep 10
            # Run performance tests
            python -m pytest tests/performance/ -v --rootdir=. || TEST_RESULT=$?
            # Stop backend
            kill $BACKEND_PID || true
            exit ${TEST_RESULT:-0}
            ;;
        esac
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          frontend/test-results/
          backend/test-results/
          tests/test-results/
        if-no-files-found: ignore

  docker-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Run Docker tests
      run: |
        cd tests/docker
        docker compose -f docker-compose.test.yml up --build -d
        sleep 30
        docker compose -f docker-compose.test.yml logs test-backend
        docker compose -f docker-compose.test.yml logs test-frontend
        docker compose -f docker-compose.test.yml down
        
    - name: Check test results
      run: |
        cd tests/docker
        docker compose -f docker-compose.test.yml up --build -d
        sleep 30
        
        # Check backend test results
        BACKEND_CONTAINER_ID=$(docker compose -f docker-compose.test.yml ps -q test-backend)
        if [ -n "$BACKEND_CONTAINER_ID" ]; then
          BACKEND_EXIT_CODE=$(docker inspect -f '{{.State.ExitCode}}' $BACKEND_CONTAINER_ID)
          echo "Backend test exit code: $BACKEND_EXIT_CODE"
        else
          echo "Backend container not found"
          BACKEND_EXIT_CODE=1
        fi
        
        # Check frontend test results
        FRONTEND_CONTAINER_ID=$(docker compose -f docker-compose.test.yml ps -q test-frontend)
        if [ -n "$FRONTEND_CONTAINER_ID" ]; then
          FRONTEND_EXIT_CODE=$(docker inspect -f '{{.State.ExitCode}}' $FRONTEND_CONTAINER_ID)
          echo "Frontend test exit code: $FRONTEND_EXIT_CODE"
        else
          echo "Frontend container not found"
          FRONTEND_EXIT_CODE=1
        fi
        
        # Clean up
        docker compose -f docker-compose.test.yml down
        
        # Fail if any tests failed
        if [ "$BACKEND_EXIT_CODE" != "0" ] || [ "$FRONTEND_EXIT_CODE" != "0" ]; then
          echo "Tests failed!"
          exit 1
        fi
        
        echo "All tests passed!"

  build:
    runs-on: ubuntu-latest
    needs: [test, docker-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker images
      run: |
        docker compose build
        
    - name: Test Docker build
      run: |
        docker compose up -d
        sleep 30
        
        # Test health endpoints
        curl -f http://localhost/ || exit 1
        
        # Clean up
        docker compose down
