name: Continuous Integration

on:
  push:
    branches: [ main, develop, feat/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        test-type: [unit, integration, performance]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.13'
        cache: 'pip'
        
    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt
        pip install -r backend/requirements-test.txt
        
    - name: Install Node.js dependencies
      run: |
        npm ci
        cd frontend && npm ci
        
    - name: Run tests
      run: |
        case ${{ matrix.test-type }} in
          unit)
            echo "Running unit tests..."
            cd frontend && npm run test:run
            cd .. && python -m pytest tests/unit/backend/ -v --rootdir=.
            ;;
          integration)
            echo "Running integration tests..."
            python -m pytest tests/integration/legacy/ -v --rootdir=.
            ;;
          performance)
            echo "Running performance tests..."
            python -m pytest tests/performance/ -v --rootdir=.
            ;;
        esac
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.test-type }}
        path: |
          frontend/test-results/
          backend/test-results/
          tests/test-results/
        if-no-files-found: ignore

  docker-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Run Docker tests
      run: |
        cd tests/docker
        docker compose -f docker-compose.test.yml up --build -d
        sleep 30
        docker compose -f docker-compose.test.yml logs test-backend
        docker compose -f docker-compose.test.yml logs test-frontend
        docker compose -f docker-compose.test.yml down
        
    - name: Check test results
      run: |
        cd tests/docker
        docker compose -f docker-compose.test.yml up --build -d
        sleep 30
        
        # Check backend test results
        BACKEND_EXIT_CODE=$(docker compose -f docker-compose.test.yml ps -q test-backend | xargs docker inspect -f '{{.State.ExitCode}}')
        echo "Backend test exit code: $BACKEND_EXIT_CODE"
        
        # Check frontend test results
        FRONTEND_EXIT_CODE=$(docker compose -f docker-compose.test.yml ps -q test-frontend | xargs docker inspect -f '{{.State.ExitCode}}')
        echo "Frontend test exit code: $FRONTEND_EXIT_CODE"
        
        # Clean up
        docker compose -f docker-compose.test.yml down
        
        # Fail if any tests failed
        if [ "$BACKEND_EXIT_CODE" != "0" ] || [ "$FRONTEND_EXIT_CODE" != "0" ]; then
          echo "Tests failed!"
          exit 1
        fi
        
        echo "All tests passed!"

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        languages: javascript, python

  build:
    runs-on: ubuntu-latest
    needs: [test, docker-test, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker images
      run: |
        docker-compose build
        
    - name: Test Docker build
      run: |
        docker-compose up -d
        sleep 30
        
        # Test health endpoints
        curl -f http://localhost/api/v1/health || exit 1
        curl -f http://localhost/ || exit 1
        
        # Clean up
        docker-compose down
